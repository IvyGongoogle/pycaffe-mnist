# 从matconvnet官方mnist例程参考的网络结构
name: "LeNet"
layer {
  name: "mnist-data"
  type: "Python"
  top: "data"
  top: "label"
  # 像素归一化，暂时先注释掉，因为可能冲突
  #transform_param {
  #  scale: 0.00390625
  #}
  python_param {
  	module: 'mnist_data_layer.layer'
  	layer: 'MnistDataLayer'
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

# ==== ^_^ 添加一个batch normalization层，参考http://blog.csdn.net/sunbaigui/article/details/50807398
# 需要添加batch_norm和scale两个层
layer {
  name: "bn_conv1"
  type: "BatchNorm"
  bottom: "conv1"
  top: "conv1"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "scale_conv1"
  type: "Scale"
  bottom: "conv1"
  top: "conv1"
  scale_param {
  	bias_term: true
  }
}
# ==== end of 添加的batch normalization层

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
# ==== ^_^ 添加一个batch normalization层，参考http://blog.csdn.net/sunbaigui/article/details/50807398
# 需要添加batch_norm和scale两个层
layer {
  name: "bn_conv2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "conv2"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "scale_conv2"
  type: "Scale"
  bottom: "conv2"
  top: "conv2"
  scale_param {
  	bias_term: true
  }
}
# ==== end of 添加的batch normalization层
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
# ==== ^_^ 添加一个batch normalization层，参考http://blog.csdn.net/sunbaigui/article/details/50807398
# 需要添加batch_norm和scale两个层
layer {
  name: "bn_ip1"
  type: "BatchNorm"
  bottom: "ip1"
  top: "conv1"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "scale_ip1"
  type: "Scale"
  bottom: "ip1"
  top: "ip1"
  scale_param {
  	bias_term: true
  }
}
# ==== end of 添加的batch normalization层
layer {
  name: "relu_ip1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
